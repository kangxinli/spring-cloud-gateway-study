
server:
  port: 1000

spring:
  application:
    name: gateway-ribbon
  cloud:
    gateway:
      discovery:
        locator:
          lowerCaseServiceId: true
          enabled: true
      routes:
        - id: provider-service
          uri: lb://provider-service
          predicates:
          - Path=/gateway/**
          filters:
          - StripPrefix=1
    nacos:
      discovery:
        server-addr: localhost:8848

# ---------  负载均衡  --------
provider-service:
  ribbon:
    # 1) 默认轮询策略 （ribbon有7种负载均衡策略: RandomRule随机策略、RoundRobinRule轮询策略、RetryRule重试策略、BestAvailableRule最低并发策略、AvailabilityFilteringRule可用过滤策略、ResponseTimeWeightedRule响应时间加权重策略、ZoneAvoidanceRule区域权重策略）
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
    # 2) 自定义扩展——权重随机
    #NFLoadBalancerRuleClassName: com.sample.app.ribbon.weightrandom.NacosWeightRandomV1Rule
    # 3) [推荐] 自定义扩展——Nacos Client负载均衡
    NFLoadBalancerRuleClassName: com.sample.app.ribbon.weightrandom.NacosWeightRandomV2Rule
    
# ---------  负载均衡   end --------

management:
  endpoints:
    web:
      exposure:
        include: '*'
  security:
    enabled: false

ribbon:
  ReadTimeout: 60000
  ConnectTimeout: 60000
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 1
  OkToRetryOnAllOperations: false
